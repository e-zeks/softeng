from datetime import datetime

from PyQt5 import QtCore
from PyQt5.QtCore import QUrl, Qt
from PyQt5.QtGui import QDesktopServices
from PyQt5.QtWidgets import QMainWindow
from screens.billingUI import Ui_MainWindow  # Assuming your UI file generated by PyQt5 Designer

class BillingWindow(QMainWindow, Ui_MainWindow):
    proceed_button = QtCore.pyqtSignal()
    back_button = QtCore.pyqtSignal()

    def __init__(self):
        super(BillingWindow, self).__init__()
        self.setupUi(self)

        self.back.clicked.connect(self.handle_backbutton)
        self.proceed.clicked.connect(self.handle_proceedbutton)
        self.help.clicked.connect(self.handle_help)


        self.setdateandtime()

    def handle_help(self):
        pdf_path = "C:\\Users\\JC\\Desktop\\softeng-main\\Anytime Fitness User Manual.pdf"
        QDesktopServices.openUrl(QUrl.fromLocalFile(pdf_path))

    def setdateandtime(self):
        # Get the current date and time
        current_datetime = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # Set the text of self.dateandtime to the current date and time
        self.dateandtime.setText(current_datetime)

        # Make self.dateandtime not editable
        self.dateandtime.setReadOnly(True)
        self.dateandtime.setFocusPolicy(Qt.NoFocus)

    def handle_proceedbutton(self):
        self.proceed_button.emit()

    def handle_backbutton(self):
        self.back_button.emit()

    def load_data(self, clientdetails, selectedcoach, selectedpackage, sessioncount, selectedsched):
        try:
            # Store details in instance variables
            self.clientdetails = clientdetails
            self.selectedcoach = selectedcoach
            self.selectedpackage = selectedpackage
            self.sessioncount = sessioncount
            self.selectedsched = selectedsched

            # Calculate additional cost for sessions exceeding the minimum
            additional_sessions = sessioncount - selectedpackage['min_sessions']
            additional_cost = additional_sessions * 500 if additional_sessions > 0 else 0

            # Calculate total amount
            self.total_amount = selectedpackage['package_price'] + additional_cost

            # Populate line edits with data
            self.clientname.setText(clientdetails['Username'])
            self.packagename.setText(selectedpackage['package_name'])
            self.packageprice.setText(f"₱{selectedpackage['package_price']:.2f}")
            self.additionalsessions.setText(
                f"{additional_sessions} sessions x ₱500 each (Additional ₱{additional_cost:.2f})" if additional_sessions > 0 else "None")
            self.totalamt.setText(f"₱{self.total_amount:.2f}")
        except Exception as e:
            print(f"Error in load_data: {e}")
            raise
